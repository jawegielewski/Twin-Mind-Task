package pl.jawegiel.twinmindjakubwegielewski.repository

import org.junit.Test

class RepositorySharedPrefsTest {

    @Test
    fun `getBitmap with valid key and existing bitmap`() {        // Test that getBitmap returns the correct Bitmap when a valid key is provided and a Bitmap string exists in DaoSharedPrefs.
    }

    @Test
    fun `getBitmap with valid key and no existing bitmap  uses defValue `() {        // Test that getBitmap returns a Bitmap derived from defValue when a valid key is provided but no corresponding Bitmap string exists in DaoSharedPrefs.
    }

    @Test
    fun `getBitmap with invalid key  uses defValue `() {        // Test that getBitmap returns a Bitmap derived from defValue when an invalid or non-existent key is provided.
    }

    @Test
    fun `getBitmap with empty string defValue and no existing bitmap`() {        // Test that getBitmap returns null or handles empty string defValue appropriately (depending on UtilsBitmap.stringToBitmap behavior) when no bitmap exists for the key.
    }

    @Test
    fun `getBitmap with null defValue and no existing bitmap`() {        // Test how getBitmap handles a null defValue when no bitmap exists for the key. This might depend on DaoSharedPrefs.getString and UtilsBitmap.stringToBitmap behavior with nulls.
    }

    @Test
    fun `getBitmap where DaoSharedPrefs getString returns null`() {        // Test that getBitmap correctly handles the scenario where DaoSharedPrefs.getString returns null (if possible according to DaoSharedPrefs.getString contract) and how UtilsBitmap.stringToBitmap reacts.
    }

    @Test
    fun `getBitmap where UtilsBitmap stringToBitmap returns null for valid string`() {        // Test the scenario where DaoSharedPrefs.getString returns a valid string, but UtilsBitmap.stringToBitmap fails to convert it and returns null.
    }

    @Test
    fun `getBitmap with a very large bitmap string from defValue`() {        // Test the performance and memory implications if defValue represents a very large bitmap string.
    }

    @Test
    fun `getBitmap with a corrupted bitmap string from DaoSharedPrefs`() {        // Test that getBitmap handles cases where the string retrieved from DaoSharedPrefs is corrupted and UtilsBitmap.stringToBitmap might throw an exception or return null.
    }

    @Test
    fun `setBitmap with valid key and valid bitmap`() {        // Test that setBitmap successfully converts the Bitmap to a string and stores it in DaoSharedPrefs with the correct key.
    }

    @Test
    fun `setBitmap with null key  potential NPE `() {        // Test if setBitmap throws a NullPointerException or handles a null key gracefully (depending on DaoSharedPrefs.setString behavior).
    }

    @Test
    fun `setBitmap with empty string key`() {        // Test how setBitmap handles an empty string as a key.
    }

    @Test
    fun `setBitmap overwriting an existing bitmap`() {        // Test that setBitmap correctly overwrites an existing bitmap string associated with the same key in DaoSharedPrefs.
    }

    @Test
    fun `setBitmap with a very large bitmap`() {        // Test the performance and memory implications of calling setBitmap with a very large Bitmap object, especially the UtilsBitmap.bitmapToString conversion.
    }

    @Test
    fun `setBitmap where UtilsBitmap bitmapToString returns null`() {        // Test how setBitmap handles the scenario where UtilsBitmap.bitmapToString returns null. This will likely cause a NullPointerException due to the non-null assertion (!!) on bitmapString.
    }

    @Test
    fun `setBitmap where UtilsBitmap bitmapToString returns an empty string`() {        // Test how setBitmap and subsequently DaoSharedPrefs.setString handle an empty string generated by UtilsBitmap.bitmapToString.
    }

    @Test
    fun `setBitmap where DaoSharedPrefs setString throws an exception`() {        // Test the behavior of setBitmap if DaoSharedPrefs.setString throws an exception during the save operation (e.g., storage full).
    }

    @Test
    fun `Interaction  setBitmap then getBitmap with same key`() {        // Test that after calling setBitmap, a subsequent call to getBitmap with the same key returns the original Bitmap (or an equivalent one).
    }

    @Test
    fun `Interaction  setBitmap with USER PHOTO key`() {        // Test specifically using the USER_PHOTO constant as the key for both setBitmap and getBitmap.
    }

    @Test
    fun `setBitmap with special characters in key`() {        // Test if setBitmap handles keys with special characters, assuming DaoSharedPrefs.setString supports them.
    }
}